# Note the use of env vars starting with APPSETTING_. This is to support azure app services.
# https://learn.microsoft.com/en-us/azure/app-service/configure-custom-container?pivots=container-windows&tabs=debian#configure-environment-variables

# The version of the application
app.version=@project.version@
quarkus.http.port=${PORT:10000}
quarkus.http.host=0.0.0.0
quarkus.jacoco.includes=com/octopus/audits/**

# Allow the HTTP interface to be accessed from other domains
quarkus.http.cors=true

# Allow all origins
quarkus.http.cors.origins=*

# Allow credentials like cookies
quarkus.http.cors.access-control-allow-credentials=true

quarkus.package.type=uber-jar

# The name of the handler used to respond to Lambda requests. This can either be "Audits" or "DatabaseInit"
quarkus.lambda.handler=${LAMBDA_NAME:Audits}

# When debugging locally we ued an in memory H2 database
quarkus.datasource.db-kind=h2
# Start the in memory database, and do not close it
quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLOSE_DELAY=-1
# We use liquidbase rather than Hibernate to initialize the databases.
quarkus.hibernate-orm.database.generation=none
# MIGRATE_AT_START must be set to "true" when debugging locally, as this initializes the H2 database.
# It is set to false for Lambda deployments, as a Lambda running the "DatabaseInit" handler is run
# during deployment to migrate the database with any new changes.
quarkus.liquibase.migrate-at-start=${MIGRATE_AT_START:${APPSETTING_MIGRATE_AT_START:false}}
quarkus.hibernate-orm.log.sql=true
quarkus.log.min-level=TRACE
quarkus.hibernate-orm.log.bind-parameters=true
# Trust all TLS certs when making outbound connections
quarkus.tls.trust-all=true
# https://github.com/oracle/graal/issues/3875
quarkus.native.additional-build-args=-J--add-exports=java.management/sun.management=ALL-UNNAMED

# These values are used when deploying the app to a container that uses a local mysql connection
%mysql.quarkus.datasource.db-kind=mysql
# Define the minimum version of mysql that we support
%mysql.quarkus.datasource.db-version=5.7
# The createDatabaseIfNotExist param ensures that liquidbase has a database to initially populate
%mysql.quarkus.datasource.jdbc.url=jdbc:mysql://${DATABASE_HOSTNAME}:${DATABASE_PORT:3306}/${DATABASE_NAME:product}?createDatabaseIfNotExist=true&connectTimeout=5000&socketTimeout=30000
# Database username is not optional when deploying to FaaS services
%mysql.quarkus.datasource.username=${DATABASE_USERNAME}
# Database password is not optional when deploying to FaaS services
%mysql.quarkus.datasource.password=${DATABASE_PASSWORD}

# These values are used when deploying the production app to AWS
%faas.quarkus.datasource.db-kind=mysql
# Define the minimum version of mysql that we support
%faas.quarkus.datasource.db-version=5.7
# The createDatabaseIfNotExist param ensures that liquidbase has a database to initially populate
%faas.quarkus.datasource.jdbc.url=jdbc:mysql://${DATABASE_HOSTNAME}:${DATABASE_PORT:3306}/${DATABASE_NAME:audit}?enabledTLSProtocols=TLSv1.2&createDatabaseIfNotExist=true
%faas.quarkus.datasource.username=${DATABASE_USERNAME}
%faas.quarkus.datasource.password=${DATABASE_PASSWORD}

# A base64 encoded copy of the JWK
# Get the JWK from https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json
cognito.jwk-base64=${COGNITO_JWK:}
# The name of the scope used to grant access to the audit records
cognito.admin-claim=${COGNITO_ADMIN_CLAIM:audit.content-team/admin}
# The client ID of the Cognito app client used to generate client credentials (i.e. machine-to-machine) access tokens
cognito.client-id=${COGNITO_CLIENT_ID:unknown}
# The Cognito group an end user must be in to work with the Audit records
cognito.admin-group=${COGNITO_ADMIN_GROUP:Developers}
# Set this to true to disable all JWT based authentication and authorization. Disabling security is useful for local debugging. Unit tests also require authorization be disabled.
cognito.disable-auth=${COGNITO_DISABLE_AUTH:false}
# Some events are sent by untrusted sources (like web apps). These events do not require auth.
audit.untrsuted-actions=${UNTRUSTED_ACTIONS:VisitedPage}