name: Docker Build and Push
description: Build the Java microservice
inputs:
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  octopus_url:
    description: 'The octopus server'
    required: true
  octopus_apikey:
    description: 'The octopus apikey'
    required: true
  aws_access_key:
    description: 'The aws access key'
    required: true
  aws_secret_access_key:
    description: 'The aws secret access key'
    required: true
  script_directory:
    description: 'The directory holding the script to package'
    required: true

runs:
  using: "composite"
  steps:
    - name: Clone code repo
      uses: actions/checkout@v2

    - uses: OctopusDeploy/install-octopus-cli-action@v3
      with:
        version: 'latest'

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - id: determine_version
      name: Determine Version
      uses: gittools/actions/gitversion/execute@v0.9.15
      with:
        additionalArguments: /overrideconfig mode=Mainline

    - name: Set up JDK 1.17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: adopt
        cache: 'maven'

    # These are the dependencies that need to be manually installed to support https://github.com/ehsaniara/maven-repository-aws-s3
    # Typically the deployment of artifacts is configured in a pom.xml file and executed as part of an application's build.
    # However, because we are using the Maven feed to host arbitrary artifacts, it is nice to be able to call
    # "mvn deploy:deploy-file" against any file. This means we don't have the luxury of referencing the
    # "com.github.ehsaniara:maven-repository-aws-s3" dependency directly in a pom.xml file and having all the necessary
    # transitive dependencies downloaded for us. Instead, we must download these dependencies manually.
    - name: Install maven-repository-aws-s3 dependencies
      run: |
        HOME=$(dirname $(readlink -f $(which mvn)))
        for dep in "com.github.ehsaniara:maven-repository-aws-s3:1.2.11:jar" "org.apache.httpcomponents:httpcore:4.4.16:jar" "com.amazonaws:aws-java-sdk-s3:1.12.405:jar" "com.amazonaws:aws-java-sdk-core:1.12.405:jar" "com.fasterxml.jackson.core:jackson-core:2.14.2:jar" "com.fasterxml.jackson.core:jackson-databind:2.14.2:jar" "com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar" "joda-time:joda-time:2.12.2:jar" "org.apache.httpcomponents:httpclient:4.5.14:jar" "commons-io:commons-io:2.12.0"
        do
           split=(${dep//:/ })
           mvn dependency:get \
            --batch-mode \
            -DrepoUrl=https://repo.maven.apache.org/maven2 \
            -Dartifact=${dep} \
            -Ddest=${HOME}/../lib/${split[0]}.${split[1]}.jar
        done
      shell: bash

    - name: Configure maven-repository-aws-s3
      run: |
        cat <<EOT > ~/.m2/settings.xml
        <settings>
          <servers>
            <server>
              <id>octopus-sales-public-snapshot</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
            <server>
              <id>octopus-sales-public-release</id>
              <username>${{ inputs.aws_access_key }}</username>
              <password>${{ inputs.aws_secret_access_key }}</password>
              <configuration>
                <region>ap-southeast-2</region>
                <publicRepository>true</publicRepository>
              </configuration>
            </server>
          </servers>
        </settings>
        EOT
      shell: bash

    # Package the script up as a zip file
    - name: Build script package
      env:
        OCTOPUS_URL: ${{ inputs.octopus_url }}
        OCTOPUS_API_KEY: ${{ inputs.octopus_apikey }}
      run: >
        octopus package zip create
        --id ${{ inputs.script_directory }}
        --version ${{ steps.determine_version.outputs.semVer }}
        --include **/*.py
      shell: bash
      working-directory: python/${{ inputs.script_directory }}

    # The script package is pushed to the Octopus maven repo.
    - name: Push script Package
      run: |
        mvn deploy:deploy-file \
          --batch-mode \
          "-DgroupId=com.octopus" \
          "-DartifactId=${{ inputs.script_directory }}" \
          "-Dversion=${{ steps.determine_version.outputs.semVer }}" \
          "-Dpackaging=zip" \
          "-Dfile=python/${{ inputs.script_directory }}/${{ inputs.script_directory }}.${{ steps.determine_version.outputs.semVer }}.zip" \
          "-DrepositoryId=octopus-sales-public-snapshot" \
          "-Durl=s3://octopus-sales-public-maven-repo/snapshot"
      shell: bash